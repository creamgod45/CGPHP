<?php

namespace I18N;

use Type\String\CGString;

enum ELanguageCode
{
    case af_ZA; // Afrikaans (South Africa)
    case am_ET; // Amharic (Ethiopia)
    case ar_EG; // Arabic (Egyptian)
    case ar_SA; // Arabic (Saudi Arabia)
    case as_IN; // Assamese (India)
    case ay_BO; // Aymara (Bolivia)
    case az_AZ; // Azerbaijani (Azerbaijan)
    case ba_RU; // Bashkir (Russian)
    case be_BY; // Belarusian (Belarus)
    case bg_BG; // Bulgarian (Bulgarian)
    case bn_IN; // Bengali (India)
    case bs_BA; // Bosnian (Bosnia and Herzegovina)
    case cr_CA; // Cree (Canada)
    case cs_CZ; // Czech (Czech Republic)
    case cy_GB; // Welsh (UK)
    case da_DK; // Danish (Denmark)
    case de_CH; // High German (Switzerland)
    case de_DE; // German (Germany)
    case dv_MV; // Dhivehi (Maldives)
    case dz_BT; // Dzongkha (Bhutan)
    case el_GR; // Greek (Greece)
    case en_AU; // English (Australia)
    case en_GB; // English (UK)
    case en_US; // United States English
    case es_ES; // Spanish (Spain)
    case es_MX; // Spanish (Mexico)
    case et_EE; // Estonian (Estonia)
    case fa_IR; // Persian (Iran)
    case fi_FI; // Finnish (Finland)
    case fil_PH; // Tagalog (Philippines)
    case fj_FJ; // Fijian (Fiji)
    case fo_FO; // Faroe (Faroe Islands)
    case fr_BE; // French (Belgium)
    case fr_CA; // French (Canada)
    case fr_FR; // French (France)
    case ga_IE; // Irish (Ireland)
    case gd_GB; // Scottish Gaelic (UK)
    case gil_KI; // Gibbert (Giribati)
    case gu_IN; // Gujarati (India)
    case ha_NG; // Hausa (Nigeria)
    case he_IL; // Hebrew (Israel)
    case hi_IN; // Hindi (India)
    case hr_HR; // Croatian (Croatia)
    case hu_HU; // Hungarian (Hungary)
    case hy_AM; // Armenian (Armenian)
    case ibb_NG; // Ibibio (Nigeria)
    case id_ID; // Bahasa Indonesia (Indonesia)
    case ig_NG; // Igbo (Nigeria)
    case is_IS; // Icelandic (Iceland)
    case it_IT; // Italian (Italian)
    case iu_CA; // Inuktitut (Canada)
    case ja_JP; // Japanese (Japan)
    case ka_GE; // Georgian (Georgia)
    case kk_KZ; // Kazakh (Kazakh)
    case km_KH; // Khmer (Cambodia)
    case kn_IN; // Kannada (India)
    case ko_KP; // Korean (North Korea)
    case ko_KR; // Korean (South Korea)
    case ku_TR; // Kurdish (Türkiye)
    case kw_GB; // Cornish (UK)
    case ky_KG; // Kyrgyz (Kyrgyz)
    case ln_CD; // Lingala (Democratic Republic of Congo)
    case lo_LA; // Lao language (Laos)
    case lt_LT; // Lithuanian (Lithuania)
    case lv_LV; // Latvian (Latvian)
    case mg_MG; // Malagasy (Madagascar)
    case mh_MH; // Marshallese (Marshall Islands)
    case mi_NZ; // Maori (New Zealand)
    case mk_MK; // Macedonian (North Macedonia)
    case ml_IN; // Malayalam (India)
    case mn_MN; // Mongolian (Mongolia)
    case mn_Mong_CN; // Mongolian (Mongolian script, China)
    case mr_IN; // Marathi (India)
    case ms_MY; // Malay (Malaysia)
    case mt_MT; // Maltese (Malta)
    case my_MM; // Burmese (Myanmar)
    case na_NR; // Nauru (Nauru)
    case ne_NP; // Nepali (Nepal)
    case nl_NL; // Dutch (Netherlands)
    case no_NO; // Norwegian (Norway)
    case ny_MW; // Chichewa (Malawi)
    case oj_CA; // Ojibway (Canada)
    case or_IN; // Oriya (India)
    case pa_Arab_PK; // Punjabi (Arabic script, Pakistan)
    case pa_IN; // Punjabi (India)
    case pl_PL; // Polish (Polish)
    case ps_AF; // Pashto (Afghanistan)
    case pt_BR; // Portuguese (Brazil)
    case pt_PT; // Portuguese (Portugal)
    case qu_PE; // Quechua (Peru)
    case ro_RO; // Romanian (Romania)
    case ru_RU; // Russian (Russia)
    case rw_RW; // Rwanda (Rwanda)
    case sa_IN; // Sanskrit (India)
    case sd_Deva_IN; // Sindhi (Devava, India)
    case sd_PK; // Sindhi (Pakistan)
    case si_LK; // Sinhala (Sri Lanka)
    case sk_SK; // Slovak (Slovakia)
    case sl_SI; // Slovenian (Slovenia)
    case sm_WS; // Samoan (Samoan)
    case sn_ZW; // Shona (Zimbawi)
    case so_DJ; // Somali (Djibouti)
    case so_SO; // Somali (Somalia)
    case sq_AL; // Albanian (Albania)
    case sr_RS; // Serbian (Serbia)
    case ss_SZ; // Swati (Swaziland)
    case st_ZA; // Southern Sotho (South Africa)
    case sv_SE; // Swedish (Sweden)
    case sw_KE; // Swahili (Kenya)
    case syr_SY; // Syriac (Syria)
    case ta_IN; // Tamil (India)
    case te_IN; // Telugu (India)
    case tg_TJ; // Tajik (Tajikistan)
    case th_TH; // Thai (Thailand)
    case ti_ER; // Tigrinya (Eritrea)
    case ti_ET; // Tigrinya (Ethiopia)
    case tj_TJ; // Tajik (Tajikistan)
    case tk_TM; // Turkmen (Turkmenistan)
    case tl_PH; // Tagalog (Philippines)
    case tn_BW; // Tswana (Botswana)
    case to_TO; // Tongan (Tongan)
    case tr_TR; // Turkish (Türkiye)
    case tt_RU; // Tatar (Russian)
    case tum_MW; // Tumbuka (Malawi)
    case ty_PF; // Tahiti (French Polynesia)
    case udm_RU; // Udmurt (Russian)
    case ug_CN; // Uyghur (China)
    case uk_UA; // Ukrainian (Ukraine)
    case ur_PK; // Urdu (Pakistan)
    case uz_UZ; // Uzbek (Uzbek)
    case ve_ZA; // Venda (South Africa)
    case vi_VN; // Vietnamese (Vietnam)
    case xh_ZA; // Xhosa (South Africa)
    case yo_NG; // Yoruba (Nigeria)
    case zh_CN; // Mainland China Simplified Chinese
    case zh_TW; // Traditional Chinese (Taiwan)
    case zh_HK; // Traditional Chinese (Hong Kong)
    case zh_SG; // Traditional Chinese (Singapore)
    case zh_MO; // Traditional Chinese (Singapore)
    case zu_ZA; // Zulu (South Africa)

    public static function isVaild(string $name):bool
    {
        foreach (ELanguageCode::cases() as $case) {
            if ((new CGString($case->name))->toUpperCase()->toString() === (new CGString($name))->toUpperCase()->toString()) {
                return true;
            }
        }
        return false;
    }

    public static function valueof(string $name): ?ELanguageCode
    {
        foreach (ELanguageCode::cases() as $case) {
            if ((new CGString($case->name))->toUpperCase()->toString() === (new CGString($name))->toUpperCase()->toString()) {
                return $case;
            }
        }
        return null;
    }
}
